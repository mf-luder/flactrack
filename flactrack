#!/bin/sh

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This script is designed to split single-file flac albums into tagged tracks.

main(){
	# Gather the metadata that's the same for all of the tracks
	ALBUM=$( sed '/TRACK/q' "$CUE" | grep TITLE | grep -o '\".*\"' | sed 's/^"\(.*\)"$/\1/' )  
	GENRE=$( sed '/TRACK/q' "$CUE" | grep 'REM\sGENRE' | sed 's/\s*REM\s\s*GENRE\s\s*\(.*\).$/\1/' )
	DATE=$( sed '/TRACK/q' "$CUE" |	grep 'REM\s\s*DATE\|YEAR' |	sed 's/\s*REM\s\s*DATE\|YEAR\s\s*\(.*\).$/\1/' )
	TRACKTOTAL=$( grep '^\s\s*TRACK\s\s*[0-9][0-9]\s\s*AUDIO' "$CUE" |
		sed -e 's/.*TRACK\s\s*\([0-9][0-9]\).*/\1/g' -e '$!d' )
	# Try to find a cover image if one was not specified. Look for jpg first, then png.
	oldIFS=$IFS ; IFS=$(printf '\n\b')
	if [ ! -f "$COVER" ] && [ "$COVER" != "0" ]; then
		for IMAGE in $( find . -maxdepth 2 \( -iname \*.jpg -o -iname \*.jpeg \) ); do
			if printf $IMAGE | grep -i '^\(.*\/\)\?\.\?\(cover\|folder\|front\)\.jpe\?g$' > /dev/null; then
				COVER=$IMAGE; break
		    fi
		done
	fi
	if [ ! -f "$COVER" ] && [ "$COVER" != 0 ]; then
		for IMAGE in $(find . -maxdepth 2 -iname *.png); do
			if printf $IMAGE | grep -i '^\(.*\/\)\?\.\?\(cover\|folder\|front\)\.png$' > /dev/null; then
				COVER=$IMAGE; break
		    fi
		done
	fi
	IFS=$oldIFS
	# Loop over each track
	for TRACKNUMBER in $(seq $TRACKTOTAL); do
		TAGS=''; TITLE=''; PERFORMER=''; SONGWRITER='';
		if [ $TRACKNUMBER -ge 1 ] && [ $TRACKNUMBER -le 9 ]; then
			TRACKNUMBER=0$TRACKNUMBER
		fi
		# Count the number of fields in the TRACK section of the cue file
		fields=0; line=$( grep -n "TRACK\s\s*$TRACKNUMBER" "$CUE" | sed -e 's/\([0-9]*\).*/\1/' -e 's/[^0-9]//g' )
		until grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep -v "TRACK\s\s*$TRACKNUMBER" |
			grep TRACK > /dev/null ||
			[ $(( $( grep -c ^ "$CUE" ) - $line )) -lt $fields ]
		do
			fields=$(( $fields + 1 ))
		done
		# Gather per-track metadata
		START=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep '\s*INDEX\s\s*01' |
			sed -e 's/\s*INDEX\s\s*01\s\s*\([0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/' -e 's/:/./2' )
		if [ -n "$pregap" ] || [ $TRACKNUMBER -eq 01 ] &&
			grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep 'INDEX\s\s*00\s\s*[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}' > /dev/null
		then
			START=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
				grep 'INDEX\s\s*00\s\s*[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}' |
				sed -e 's/\s*INDEX\s\s*00\s\s*\([0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/' -e 's/:/./2' )
		fi
		if [ "$START" != "$( printf "$START" | grep '^[0-9]\{2\}:[0-9]\{2\}\.[0-9]\{2\}$' )" ]; then
			>&2 printf '%s\n' "$name: Missing or malformed initial index for track $TRACKNUMBER"
		fi
		TITLE=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep TITLE |
			sed 's/^.*TITLE\s\s*\"\(.*\)\".$/\1/' )
		PERFORMER=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep PERFORMER |
			sed 's/^.*PERFORMER\s\s*\"\(.*\)\".$/\1/' )
		SONGWRITER=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep SONGWRITER |
			sed 's/^.*SONGWRITER\s\s*\"\(.*\)\".$/\1/' )
		# Set the tags and file names
		test -n "$TITLE" && TAGS="$TAGS --tag=TITLE=\"$TITLE\""
		if [ -n "$SONGWRITER" ]; then
			TAGS="$TAGS --tag=\"ARTIST=\"$SONGWRITER\""
			if [ -n "$PERFORMER" ]; then
				TAGS="$TAGS --tag=PERFORMER=\"$PERFORMER\""
			fi
		elif [ -n "$PERFORMER" ]; then
			TAGS="$TAGS --tag=ARTIST=\"$PERFORMER\""
		fi
		test -n "$ALBUM" && TAGS="$TAGS --tag=ALBUM=\"$ALBUM\""
		test -n "$GENRE" && TAGS="$TAGS --tag=GENRE=\"$GENRE\""
		test -n "$DATE"  && TAGS="$TAGS --tag=DATE=\"$DATE\""
		TAGS="$TAGS --tag=TRACKNUMBER=$TRACKNUMBER --tag=TRACKTOTAL=$TRACKTOTAL"
		test -f "$COVER" && TAGS="$TAGS --picture=\"$COVER\""
		if [ -n "$TITLE" ]; then
			NAME="$TRACKNUMBER - $( printf "$TITLE" | sed 's/\//-/g' ).flac"
		else
			NAME="TRACK $TRACKNUMBER.flac"
		fi
		if [ -f "$NAME" ] && [ -z "$force" ]; then
			printf '%s\n' "$name: Exsisting file will not be recreated: \"$NAME\""
		fi
		NAME=\"$NAME\"
		# The end point for each track is contained in the next track's metadata
		if [ $TRACKNUMBER -ne $TRACKTOTAL ]; then
			TRACKNUMBER=$( expr $TRACKNUMBER + 1 )
			if [ $TRACKNUMBER -ge 1 ] && [ $TRACKNUMBER -le 9 ]; then
				TRACKNUMBER=0$TRACKNUMBER;
			fi
			fields=0
			line=$( grep -n "TRACK\s\s*$TRACKNUMBER" "$CUE" | sed -e 's/\([0-9]*\).*/\1/' -e 's/[^0-9]//g' )
			until grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
				grep -v "TRACK\s\s*$TRACKNUMBER" |
				grep TRACK > /dev/null ||
				[ $(( $( grep -c ^ "$CUE" ) - $line )) -lt $fields ]
			do
				fields=$(( $fields + 1 ))
			done
			END=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
				grep "INDEX\s\s*01" |
				sed -e 's/\s*INDEX\s\s*01\s\s*\([0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/' -e 's/:/./2' )
			if [ -n "$pregap" ] &&
				grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
				grep "INDEX 00" > /dev/null
			then
				END=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
					grep "INDEX 00" |
					sed -e 's/\s*INDEX\s\s*00\s\s*\([0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/' -e 's/:/./2' )
			fi
			# Create the files
			flac -c -d --totally-silent --skip=$START --until=$END "$FILE" |
			eval flac --totally-silent $OPTS $TAGS -o $NAME - &
			PIDS="$PIDS $!"
		else
			flac -c -d --totally-silent --skip=$START "$FILE" |
			eval flac --totally-silent $OPTS $TAGS -o $NAME - &
			PIDS="$PIDS $!"
		fi
	done
	# Remove a temporary file that may or may not have been created
	printf "$FILE" | grep '/tmp/.*\.flac' > /dev/null && rm "$FILE"
	# Exit 1 if any of the encoding processes did not exit 0
	for PID in $PIDS; do
		wait $PID
		if [ $? -ne 0 ]; then
			exit 1
		fi
	done
}
usage(){ # the --help text
printf "Usage: $name [options] <file.cue>

Use a cue file to produce tagged flac tracks from
a lossless audio file.

Options:
 -h, --help	display this help and exit
 -g, --pregap	prepend pregaps, rather than appending
		 them to the previous track
 -f, --force	overwrite existing files, rather than
 		 skipping them
 -0 ... -8	set the compression level; default is 5
 --image=<file>	select an image to tag the tracks with
 -i <file>	short for --image
"
}
guess(){ # Try to find an audio file if the one in the cue doesn't exist or isn't compatible with flac
	oldIFS=$IFS && IFS=$(printf '\n\b')
	# Find files with the specified file extension or the same one as the file in the cue
	test -n "$1" && ext="$1" || ext=$( printf $FILE | sed 's/.*\.\(.*\)$/\1/' )
	files=$( find -maxdepth 1 | grep -i "\.$ext$" )
	# if there's exactly one, assume it's the right one
	if [ $( printf "$files" | wc -l | sed 's/[^0-9]//g' ) -eq 1 ]; then
		printf "$files" | sed 's/.*\///'
	# Otherwise, look for compatible audio files with the same name as the cue file
	else
		files=$( find . -maxdepth 1 | grep -i '.*\.\(flac\|wav\|w64\|raw\|rf64\|oga\|ogg\|aiff\?\)$' )
		cuename="$( printf $CUE | sed 's/\(.*\/\)\?\(.*\)\.cue$/\2/I' )"
		count=0
		for file in $files; do
			if printf $file | grep -i "\(.*\/\)\?$cuename\.....\?$" > /dev/null; then
				match=$file; count=$(( $count + 1 ))
			fi
		done 
		# If it exists, use the file with the same name as the cue and the right file extension 
		if [ -f "$cuename.$ext" ]; then
			printf "$cuename.$ext"
		# Otherwise if there's exactly one audio file with the same name as the cue file, use that one.
		elif [ $count -eq 1 ]; then
			printf "$match" | sed 's/.*\///'
		fi
	fi
	IFS=$oldIFS
}
# Discover the script's name for use in help and error messages
name=$( printf "$0" | sed 's/.*\///' )
# Make sure that flac is installed and /dev/null exists
if [ ! -e '/dev/null' ]; then
	printf '%s\n' "$name: /dev/null not found. Aborting." & exit 1
elif ! flac > /dev/null 2>&1; then
	printf '%s\n' "$name: flac does not seem to be installed. Aborting." & exit 1
fi
# Check for options that have been enabled
if [ $# -eq 0 ]; then
	usage & exit 1
fi
while [ $# -gt 0 ]; do
	case $1 in
		-h | --help )	usage & exit;;
		-p | --pregap )	pregap=0; shift;;
		-f | --force )	OPTS="$OPTS -f" ; force=0; shift;;
		-i )			COVER=$( printf "$2" | sed "s/^~\//\/home\/$USER\//" ); shift; shift;;
		--image=* )		COVER=$( printf "$1" | sed -e 's/--picture=//' -e "s/^~\//\/home\/$USER\//" ); shift;;
		--image= )		COVER=0; shift;;
		-0|-1|-2|-3|-4|-5|-6|-7|-8) OPTS="$OPTS $1"; shift;;
		*)				CUE="$1"; shift;;
	esac
done
# Make sure that the remaining parameter is a cue file
if [ -z "$CUE" ]; then
	>&2 printf '%s\n' "$name: No cue file specified. See --help for usage." & exit 1
elif [ ! -f "$CUE" ] || ! printf "$CUE" | grep -i '\.cue$' > /dev/null; then
	>&2 printf '%s\n' "$name: \"$CUE\" is neither a cue file nor a valid option." & exit 1
fi
# Make sure we're in the same directory as the cue file
printf "$CUE" | grep '/' > /dev/null && cd "$( printf "$CUE" | sed 's/\(.*\)\/.*/\1\//' )"
# Make sure that a single audio file is listed in the cue and that it exists, or look for an alternative
FILE=$( grep 'FILE' "$CUE" | grep -o '\".*\"' | sed 's/^"\(.*\)"$/\1/' )
if [ $( printf "$FILE" | wc -l | sed 's/[^0-9]//g' ) -gt 1 ]; then
	printf '%s\n' "$name: Multiple audio files are listed in the cue."
	printf '%s\n' " The album has probably already been split into tracks."
	exit
elif [ ! -f "$FILE" ]; then
	printf '%s\n' "$name: Could not find the audio file in the cue sheet: \"$FILE\""
	FILE=$(guess)
	if [ -f "$FILE" ]; then
		printf '%s\n'  "$name: Trying \"$FILE\" instead..."
	fi
fi
# Make sure that the audio file is a flac file, and try to convert it or find a different one if it isn't
if [ -f "$FILE" ] && ! printf "$FILE" | grep -i '\.flac$' > /dev/null; then
	if [ ! -d '/tmp' ]; then
		>&2 printf '%s\n' "$name: Format conversion requires /tmp to exist." & exit 1
	else
		filename="$( printf "$FILE" | sed 's/\(.*\)\..*/\1/' ).flac"
		if flac --totally-silent -0 -o "/tmp/$filename" "$FILE"; then
			FILE="/tmp/$filename"
		else
			printf '%s\n' "$name: Format not supported by the flac encoder: \"$FILE\""
			FILE=$(guess flac)
		fi
	fi
	if [ -f "$FILE" ]; then
		printf '%s\n' "$name: Trying \"$FILE\" instead..."
		if ! printf "$FILE" | grep -i '\.flac$' > /dev/null; then
			flac --totally-silent -0 -f -o "/tmp/$filename" "$FILE" && FILE="/tmp/$filename" ||
			( >&2 printf '%s\n' "$name: File conversion failed." & exit 1 )
		fi
	fi
fi
# Run the main function, which does the splitting and tagging
if [ -f "$FILE" ]; then
	main
else
	>&2 printf '%s\n' "$name: No alternative file found." & exit 1
fi

