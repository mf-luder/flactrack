#!/bin/sh

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This script is designed to split single-file flac albums into tagged tracks.

main(){
	# Gather the metadata that's the same for all of the tracks
	ALBUM=$( cat "$CUE" |
		sed '/TRACK/q' |
		grep TITLE |
		grep -o \".*\" |
		sed 's/^"\(.*\)"$/\1/' )  
	GENRE=$( cat "$CUE" |
		sed '/TRACK/q' |
		grep "REM\sGENRE" |
		sed 's/\s*REM\s\s*GENRE\s\s*\(.*\).$/\1/' )
	DATE=$( cat "$CUE" |
		sed '/TRACK/q' |
		grep "REM\s\s*DATE\|YEAR" |
		sed 's/\s*REM\s\s*DATE\|YEAR\s\s*\(.*\).$/\1/' )
	TRACKTOTAL=$( grep TRACK.*AUDIO "$CUE" |
		awk '{print $2}' |
		tail -n1 |
		sed 's/.*\([1-9]{2}\).*/\1/' )
	# Try to find a cover image if one was not specified. Look for jpg first, then png.
	oldIFS=$IFS ; IFS=$(printf '\n\b')
	if [ ! -f "$COVER" ] && [ "$COVER" != "0" ]; then
		for IMAGE in $( find . -maxdepth 2 \( -iname \*.jpg -o -iname \*.jpeg \) ); do
		    image=$( printf "$IMAGE" | tr A-Z a-z | sed 's/.*\/\(.*\)\.jpe\?g/\1/' )
		    if [ "$image" = "cover" ] || [ "$image" = ".cover" ]; then
				COVER=$IMAGE; break
			elif [ "$image" = "folder" ] || [ "$image" = ".folder" ]; then
				COVER=$IMAGE; break
			elif [ "$image" = "front" ] || [ "$image" = ".front" ]; then
				COVER=$IMAGE; break
		    fi
		done
	fi
	if [ ! -f "$COVER" ] && [ "$COVER" != 0 ]; then
		for IMAGE in $(find . -maxdepth 2 -iname *.png); do
	    	image=$( printf "$IMAGE" | tr A-Z a-z | sed 's/.*\/\(.*\)\.png/\1/' )
		    if [ "$image" = "cover" ] || [ "$image" = ".cover" ]; then
				COVER=$IMAGE; break
			elif [ "$image" = "folder" ] || [ "$image" = ".folder" ]; then
				COVER=$IMAGE; break
			elif [ "$image" = "front" ] || [ "$image" = ".front" ]; then
				COVER=$IMAGE; break
		    fi
		done
	fi
	IFS=$oldIFS
	for TRACKNUMBER in $(seq $TRACKTOTAL); do
		TAGS=''; TITLE=''; PERFORMER=''; SONGWRITER='';
		if [ $TRACKNUMBER -ge 1 ] && [ $TRACKNUMBER -le 9 ]; then
			TRACKNUMBER=0$TRACKNUMBER
		fi
		# count the number of lines in the TRACK section of the cue file
		fields=0
		line=$( grep -n "TRACK\s\s*$TRACKNUMBER" "$CUE" | awk '{print $1}' | sed 's/://' ) 
		while ! grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep -v "TRACK\s\s*$TRACKNUMBER" |
			grep TRACK > /dev/null &&
			[ $( expr $( cat "$CUE" | wc -l ) - $line ) -gt $fields ]
		do
			fields=$( expr $fields + 1 )
		done
		# Gather per-track metadata
		START=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep '\s*INDEX\s\s*01' |
			sed -e 's/\s*INDEX\s\s*01\s\s*\([0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/' -e 's/:/./2' )
		if [ -n "$pregap" ] || [ $TRACKNUMBER -eq 01 ] &&
			grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep 'INDEX\s\s*00\s\s*[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}' > /dev/null
		then
			START=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
				grep 'INDEX\s\s*00\s\s*[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}' |
				sed -e 's/\s*INDEX\s\s*00\s\s*\([0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/' -e 's/:/./2' )
		fi
		if [ "$START" != "$( printf "$START" | grep '^[0-9]\{2\}:[0-9]\{2\}\.[0-9]\{2\}$' )" ]; then
			>&2 printf '%s\n' "$name: Missing or malformed initial index for track $TRACKNUMBER"
		fi
		TITLE=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep TITLE |
			sed 's/^.*TITLE\s\s*\"\(.*\)\".$/\1/' )
		PERFORMER=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep PERFORMER |
			sed 's/^.*PERFORMER\s\s*\"\(.*\)\".$/\1/' )
		SONGWRITER=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
			grep SONGWRITER |
			sed 's/^.*SONGWRITER\s\s*\"\(.*\)\".$/\1/' )
		# Set the tags and file names
		if [ -n "$TITLE" ]; then
			TAGS="$TAGS --tag=TITLE=\"$TITLE\""
		fi
		if [ -n "$SONGWRITER" ]; then
			TAGS="$TAGS --tag=\"ARTIST=\"$SONGWRITER\""
			if [ -n "$PERFORMER" ]; then
				TAGS="$TAGS --tag=PERFORMER=\"$PERFORMER\""
			fi
		elif [ -n "$PERFORMER" ]; then
			TAGS="$TAGS --tag=ARTIST=\"$PERFORMER\""
		fi
		if [ -n "$ALBUM" ]; then
			TAGS="$TAGS --tag=ALBUM=\"$ALBUM\""
		fi
		if [ -n "$GENRE" ]; then
			TAGS="$TAGS --tag=GENRE=\"$GENRE\""
		fi
		if [ -n "$DATE" ]; then
			TAGS="$TAGS --tag=DATE=\"$DATE\""
		fi
		TAGS="$TAGS --tag=TRACKNUMBER=$TRACKNUMBER"
		TAGS="$TAGS --tag=TRACKTOTAL=$TRACKTOTAL"
		if [ -f "$COVER" ]; then
			TAGS="$TAGS --picture=\"$COVER\""
		fi
		if [ -n "$TITLE" ]; then
			NAME="$TRACKNUMBER - $TITLE.flac"
		else
			NAME="TRACK $TRACKNUMBER.flac"
		fi
		if [ -f "$NAME" ] && [ -z "$force" ]; then
			printf '%s\n' "$name: Exsisting file will not be recreated: \"$NAME\""
		fi
		NAME=\"$NAME\"
		# The end point for each track is contained in the next track's metadata
		if [ $TRACKNUMBER -ne $TRACKTOTAL ]; then
			TRACKNUMBER=$( expr $TRACKNUMBER + 1 )
			if [ $TRACKNUMBER -ge 1 ] && [ $TRACKNUMBER -le 9 ]; then
				TRACKNUMBER=0$TRACKNUMBER;
			fi
			fields=0
			line=$( grep -n "TRACK\s\s*$TRACKNUMBER" "$CUE" | awk '{print $1}' | sed 's/://' ) 
			while ! grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
				grep -v "TRACK\s\s*$TRACKNUMBER" |
				grep TRACK > /dev/null &&
				[ $( expr $( cat "$CUE" | wc -l ) - $line ) -gt $fields ]
			do
				fields=$( expr $fields + 1 )
			done
			END=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
				grep "INDEX\s\s*01" |
				sed -e 's/\s*INDEX\s\s*01\s\s*\([0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/' -e 's/:/./2' )
			if [ -n "$pregap" ] &&
				grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
				grep "INDEX 00" > /dev/null
			then
				END=$( grep -A $fields "TRACK\s\s*$TRACKNUMBER" "$CUE" |
					grep "INDEX 00" |
					sed -e 's/\s*INDEX\s\s*00\s\s*\([0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\).*$/\1/' -e 's/:/./2' )
			fi
			# Create the files
			flac -c -d --totally-silent --skip=$START --until=$END "$FILE" |
			eval flac --totally-silent $OPTS $TAGS -o $NAME - &
			PIDS="$PIDS $!"
		else
			flac -c -d --totally-silent --skip=$START "$FILE" |
			eval flac --totally-silent $OPTS $TAGS -o $NAME - &
			PIDS="$PIDS $!"
		fi
	done
	for PID in $PIDS; do
		wait $PID
		if [ $? -ne 0 ]; then
			exit 1
		fi
	done
}
usage(){ # the --help text
printf "Usage: $name [options] <file.cue>

Use a cue file to produce tagged flac tracks from
a lossless audio file.

Options:
 -h, --help	display this help and exit
 -g, --pregap	prepend pregaps, rather than appending
		 them to the previous track
 -f, --force	overwrite existing files, rather than
 		 skipping them
 -0 ... -8	set the compression level; default is 5
 --image=<file>	select an image to tag the tracks with
 -i <file>	short for --image
"
}
guess(){ # Try to find an audio file if the one in the cue doesn't exist
	oldIFS=$IFS && IFS=$(printf '\n\b')
	files=$(find . -maxdepth 1 -iregex ".*\.\(flac\|wav\|aiff\|raw\|oga\|ogg\)")
	# if there's only one audio file in the directory, assume it's the right one
	if [ $( printf "$files" | wc -l ) -eq 1 ]; then
		printf "$files" | sed 's/.*\///'
	# if not, see if there's an audio file whose name is contained within the directory name
	elif [ $( printf "$files" | wc -l ) -gt 1 ]; then
		count=0
		for file in "$files"; do
			if pwd | sed 's/.*\///' |
				grep "$( printf "$file" | sed 's/\(.*\/\)*\(.*\)\.....\?/\2/' )"
			then
				count=$( expr $count + 1 )
				match=$file
			fi
		done
		if [ $count -eq 1 ]; then
			printf "$match" | sed 's/.*\///'
		fi
	fi
	IFS=$oldIFS
}
name=$( printf "$0" | sed 's/.*\///' )
# Check for options that have been enabled
if [ $# -eq 0 ]; then
	usage & exit 1
fi
while [ $# -gt 0 ]; do
	case $1 in
		-h | --help )	usage & exit;;
		-p | --pregap )	pregap=0; shift;;
		-f | --force )	OPTS="$OPTS -f" ; force=0; shift;;
		-i )			COVER=$( printf "$2" | sed "s/^~\//\/home\/$USER\//" ); shift; shift;;
		--image=* )		COVER=$( printf "$1" | sed -e 's/--picture=//' -e "s/^~\//\/home\/$USER\//" ); shift;;
		--image= )		COVER=0; shift;;
		-0|-1|-2|-3|-4|-5|-6|-7|-8) OPTS="$OPTS $1"; shift;;
		*)				CUE="$1"; shift;;
	esac
done
# Make sure that the remaining parameter is a cue file and that we can find the
# corrosponding audio file before passing it to the main function
if [ -z "$CUE" ]; then
	>&2 printf '%s\n' "$name: No cue file specified."
	exit 1
elif printf "$CUE" | grep -i '\.cue$' > /dev/null; then
	if printf "$CUE" | grep '/' > /dev/null; then
		cd $( printf "$CUE" | sed 's/\(.*\)\/.*/\1\//' )
	fi
	FILE=$( grep FILE "$CUE" | grep -o \".*\" | sed 's/^"\(.*\)"$/\1/' )
	if [ $( printf "$FILE" | wc -l ) -gt 1 ]; then
		printf '%s\n' "$name: Multiple audio files are listed in the cue."
		printf '%s\n' " The album has probably already been split into tracks."
  		exit
	elif [ ! -f "$FILE" ]; then
		printf '%s\n' "$name: Could not find the audio file in the cue: $FILE"
		FILE=$(guess)
		if [ -f "$FILE" ]; then
			printf '%s\n'  "$name: Using $FILE instead."
		fi
	fi
	if [ -f "$FILE" ]; then
		main
	else
		exit 1
	fi
else
	>&2 printf '%s\n' "$name: \"$CUE\" is neither a cue file nor a valid option."
	exit 1
fi

