#!/bin/sh

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This script is designed to split single-file flac albums into tagged tracks.

main(){
	# Gather the metadata that's the same for all of the tracks
	ALBUMPERFORMER=$( sed -n '
		1,/TRACK\s\s*01\s\s*AUDIO/{
			/^\s*PERFORMER/{
				s/^\s*PERFORMER\s\s*//p
			}
		}' "$CUE" | sed -e 's/^\s*"\(.*\)"\s*$/\1/' -e 's/"/\\"/g' -e 's/\r//g' )
	ALBUM=$( sed -n '
		1,/TRACK\s\s*01\s\s*AUDIO/{
			/^\s*TITLE/{
				s/^\s*TITLE\s\s*//p
			}
		}' "$CUE" | sed -e 's/^\s*"\(.*\)"\s*$/\1/' -e 's/"/\\"/g' -e 's/\r//g' )
	GENRE=$( sed -n '
		1,/TRACK\s\s*01\s\s*AUDIO/{
			/^\s*REM\s\s*GENRE/{
				s/^\s*REM\s\s*GENRE\s\s*//p
			}
		}' "$CUE" | sed -e 's/^\s*"\(.*\)"\s*$/\1/' -e 's/"/\\"/g' -e 's/\r//g' )
	DATE=$( sed -n '
		1,/TRACK\s\s*01\s\s*AUDIO/{
			/^\s*REM\s\s*\(DATE\|YEAR\)/{
				s/^\s*REM\s\s*\(DATE\|YEAR\)\s\s*\([^\s\r]*\).*/\2/p
			}
		}' "$CUE" | sed -e 's/^\s*"\(.*\)"\s*$/\1/' -e 's/\r//g' )
	TRACKTOTAL=$( sed -n '
		/TRACK\s\s*[0-9][0-9]\s\s*AUDIO/{
			s/^\s*TRACK\s\s*\([0-9][0-9]\)\s\s*AUDIO/\1/p
		}' "$CUE" | sed -e '$!d' -e 's/[^0-9]//g' )
	TOTALDISCS=$( sed -n '
		1,/TRACK\s\s*01\s\s*AUDIO/{
			/^\s*REM\s\s*TOTALDISCS/{
				s/.*TOTALDISCS\s\s\([0-9][0-9]*\).*/\1/p
			}
		}' "$CUE" | sed 's/[^0-9]//g' )
	if [ -n "$TOTALDISCS" ] && [ $TOTALDISCS -gt 1 ]; then
		DISCNUMBER=$( sed -n '
			1,/TRACK\s\s*01\s\s*AUDIO/{
				/^\s*REM\s\s*DISCNUMBER/{
					s/.*DISCNUMBER\s\s*\([0-9][0-9]*\).*/\1/p
				}
			}' "$CUE" | sed 's/[^0-9]//g' )
	fi
	# Try to find a cover image if one was not specified. Look for jpg first, then png.
	oldIFS=$IFS; IFS=$(printf '\n\b')
	if [ ! -f "$COVER" ] && [ "$COVER" != "0" ]; then
		if [ -n "$COVER" ]; then
			printf '%s\n' "$NAME: File not found: \"$COVER\""
		fi
		for IMAGE in $( find | grep -i '^\([^\/]*\/\)\?\([^\/]*\/\)\?[^\/]*\.jpe\?g$' ); do
			if printf '%s' "$IMAGE" |
				grep -iq "\/\.\?\($CUENAME\|cover\|front_cover\|folder\|front\)\.jpe\?g$"
			then
				COVER=$IMAGE; break
		    fi
		done
	fi
	if [ ! -f "$COVER" ] && [ "$COVER" != 0 ]; then
		for IMAGE in $( find | grep -i '^\([^\/]*\/\)\?\([^\/]*\/\)\?[^\/]*\.png$' ); do
			if printf '%s' "$IMAGE" |
				grep -iq "\/\.\?\($CUENAME\|cover\|front_cover\|folder\|front\)\.png$"
			then
				COVER=$IMAGE; break
		    fi
		done
	fi
	IFS=$oldIFS
	# Loop over each track
	for TRACKNUMBER in $(seq $TRACKTOTAL); do
		TAGS=''; TITLE=''; PERFORMER=''; ALBUMARTIST="$ALBUMPERFORMER"; SONGWRITER=''; START=''
		if [ $TRACKNUMBER -ge 1 ] && [ $TRACKNUMBER -le 9 ]; then
			TRACKNUMBER=0$TRACKNUMBER
		fi
		# Determine the length of the TRACK section in the cue file
		if [ $TRACKNUMBER = "01" ] || [ $TRACKNUMBER = $TRACKTOTAL ]; then
			top=$( grep -n "TRACK\s\s*$TRACKNUMBER" "$CUE" | sed -e 's/\([0-9]*\).*/\1/' -e 's/[^0-9]//g' )
			length=0
			until sed -n $top,$(( $top + $length ))p "$CUE" |
				grep -v "TRACK\s\s*$TRACKNUMBER" |
				grep -q 'TRACK' ||
				[ $(( $( grep -c ^ "$CUE" ) - $top )) -lt $length ]
			do
				length=$(( $length + 1 ))
			done
		fi
		# Gather per-track metadata
		if [ $TRACKNUMBER -eq '01' ]; then
			START='0'
		elif [ -n "$END" ]; then
			START="$END"
		else
			>&2 printf '%s\n' "$NAME: Missing or malformed initial index for track $TRACKNUMBER"
		fi
		TITLE=$( sed -n "
			$top,$(( $top + $length ))"'{
				/^\s*TITLE/{
					s/^\s*TITLE\s\s*//p
				}
			}' "$CUE" | sed -e 's/^\s*"\(.*\)"\s*$/\1/' -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's/\r//g' )
		PERFORMER=$( sed -n "
			$top,$(( $top + $length ))"'{
				/^\s*PERFORMER/{
					s/^\s*PERFORMER\s\s*//p
				}
			}' "$CUE" | sed -e 's/^\s*"\(.*\)"\s*$/\1/' -e 's/"/\\"/g' -e 's/\r//g' )
		test -z "$PERFORMER" && PERFORMER="$ALBUMARTIST"
		test "$PERFORMER" = "$ALBUMARTIST" && ALBUMARTIST=''
		SONGWRITER=$( sed -n "
			$top,$(( $top + $length ))"'{
				/^\s*SONGWRITER/{
					s/^\s*SONGWRITER\s\s*//p
				}
			}' "$CUE" | sed -e 's/^\s*"\(.*\)"\s*$/\1/' -e 's/"/\\"/g' -e 's/\r//g' )
		# Set the tags and file names
		test -n "$TITLE" && TAGS="$TAGS --tag=TITLE=\"$TITLE\""
		test -n "$PERFORMER" && TAGS="$TAGS --tag=ARTIST=\"$PERFORMER\""
		test -n "$ALBUMARTIST" && TAGS="$TAGS --tag=ALBUMARTIST=\"$ALBUMARTIST\""
		test -n "$SONGWRITER" && TAGS="$TAGS --tag=COMPOSER=\"$SONGWRITER\""
		test -n "$ALBUM" && TAGS="$TAGS --tag=ALBUM=\"$ALBUM\""
		test -n "$DISCNUMBER" && TAGS="$TAGS --tag=DISCNUMBER=\"$DISCNUMBER\""
		test -n "$DATE"  && TAGS="$TAGS --tag=DATE=\"$DATE\""
		TAGS="$TAGS --tag=TRACKNUMBER=$TRACKNUMBER --tag=TRACKTOTAL=$TRACKTOTAL"
		test -n "$GENRE" && TAGS="$TAGS --tag=GENRE=\"$GENRE\""
		test -f "$COVER" && TAGS="$TAGS --picture=\"$COVER\""
		if [ -n "$TITLE" ]; then
			FILENAME="$TRACKNUMBER - $( printf '%s' "$TITLE" | sed 's/\//-/g' ).flac"
		else
			FILENAME="TRACK $TRACKNUMBER.flac"
		fi
		if [ -f "$FILENAME" ] && [ -z "$force" ]; then
			printf '%s\n' "$NAME: Exsisting file will not be recreated: \"$FILENAME\""
		fi
		FILENAME=\"$( printf '%s' "$FILENAME" | sed 's/\([^\\]\)"/\1\\"/g' )\"
		# The end point for each track is contained in the next track's metadata
		if [ $TRACKNUMBER -ne $TRACKTOTAL ]; then
			TRACKNUMBER=$( expr $TRACKNUMBER + 1 )
			if [ $TRACKNUMBER -ge 1 ] && [ $TRACKNUMBER -le 9 ]; then
				TRACKNUMBER=0$TRACKNUMBER;
			fi
			top=$( grep -n "TRACK\s\s*$TRACKNUMBER" "$CUE" | sed -e 's/\([0-9]*\).*/\1/' -e 's/[^0-9]//g' )
			length=0
			until sed -n $top,$(( $top + $length ))p "$CUE" |
				grep -v "TRACK\s\s*$TRACKNUMBER" |
				grep -q 'TRACK' ||
				[ $(( $( grep -c ^ "$CUE" ) - $top )) -lt $length ]
			do
				length=$(( $length + 1 ))
			done
			END=$( sed -n "
				$top,$(( $top + $length ))"'{
					/^\s*INDEX\s\s*01/{
						s/^\s*INDEX\s\s*01\s\s*\([0-9]\{2\}:[0-5][0-9]:\([0-6][0-9]\|7[0-5]\)\)\s*$/\1/p
					}
				}' "$CUE" )
			if [ -n "$pregap" ] || [ $TRACKNUMBER -eq 01 ] &&
				sed -n $top,$(( $top + $length ))p "$CUE" |
				grep -q 'INDEX\s\s*00\s\s*[0-9]\{2\}:[0-5][0-9]:\([0-6][0-9]\|7[0-5]\)'
			then
				END=$( sed -n "
					$top,$(( $top + $length ))"'{
						/^\s*INDEX\s\s*00/{
							s/^\s*INDEX\s\s*00\s\s*\([0-9]\{2\}:[0-5][0-9]:\([0-6][0-9]\|7[0-5]\)\)\s*$/\1/p
						}
					}' "$CUE" )
			fi
			# Convert cue index to a sample number
			if [ -n "$END" ]; then
				SECOND=$( expr $( printf '%s' "$END" | sed 's/^\([0-9]\{2\}\):.*/\1/' ) \* 60 )
				SECOND=$( expr $SECOND + $( printf '%s' "$END" | sed 's/.*:\([0-5][0-9]\):.*/\1/' ) )
				FRAME=$( printf '%s' "$END" | sed 's/.*:\([0-9]\{2\}\)/\1/' )
				END=$( expr $SECOND \* 44100 + $FRAME \* 588 )
			fi
			# Create the files
			flac -c -d --totally-silent --skip=$START --until=$END "$FILE" |
			eval flac --totally-silent $force $compression $TAGS -o $FILENAME - &
			PIDS="$PIDS $!"
		else
			flac -c -d --totally-silent --skip=$START "$FILE" |
			eval flac --totally-silent $force $compression $TAGS -o $FILENAME - &
			PIDS="$PIDS $!"
		fi
	done
}
usage(){ # the --help text
printf '%s' "Usage: $NAME [options] <file.cue>

Use a cue file to produce tagged flac tracks from
a lossless audio file.

Options:
 -h, --help	display this help and exit
 -g, --pregap	prepend pregaps, rather than appending
		 them to the previous track
 -f, --force	overwrite existing files, rather than
 		 skipping them
 -0 ... -8	set the compression level; default is 5
 --image=<file>	select an image to tag the tracks with
 -i <file>	short for --image
"
}
guess(){ # Try to find an audio file if the one in the cue doesn't exist or isn't compatible with flac
	oldIFS=$IFS && IFS=$(printf '\n\b')
	# Find files with the specified file extension or the same one as the file in the cue
	test -n "$1" && EXT="$1" || EXT=$( printf '%s' $FILE | sed 's/.*\.\(.*\)$/\1/' )
	# if there's exactly one, assume it's the right one
	if [ $( find . ! -name . -prune -print | grep -i "\.$EXT$" | wc -l | sed 's/[^0-9]//g' ) -eq 1 ]; then
		printf '%s' "$( find . ! -name . -prune -print | grep -i "\.$EXT$" )" | sed 's/.*\///'
	# Otherwise, look for compatible audio files with the same name as the cue file
	else
		count=0
		for file in $( find . ! -name . -prune -print |
			grep -i '\.\(flac\|wav\|w64\|raw\|rf64\|oga\|ogg\|aiff\?\)$' )
		do
			if printf $file '%s' | grep -iq "\(.*\/\)\?$CUENAME\.....\?$"; then
				MATCH=$file; count=$(( $count + 1 ))
			fi
		done 
		# If it exists, use the file with the same name as the cue and the right file extension 
		if [ -f "$CUENAME.$EXT" ]; then
			printf '%s' "$CUENAME.$EXT"
		# Otherwise if there's exactly one audio file with the same name as the cue file, use that one.
		elif [ $count -eq 1 ]; then
			printf '%s' "$MATCH" | sed 's/.*\///'
		fi
	fi
	IFS=$oldIFS
}
# Discover the script's name for use in help and error messages
NAME=$( printf '%s' "$0" | sed 's/.*\///' )
# Make sure that flac is installed
if [ -w '/dev/null' ] && ! flac > /dev/null 2>&1; then
	printf '%s\n' "$NAME: flac does not seem to be installed. Aborting." & exit 1
fi
# Check for options that have been enabled
if [ $# -eq 0 ]; then
	usage & exit 1
fi
while [ $# -gt 0 ]; do
	case $1 in
		-h | --help )
			usage & exit;;
		-p | --pregap )
			pregap=0; shift;;
		-f | --force )
			force='-f'; shift;;
		-i )
			if [ -z "$COVER" ]; then
				COVER=$( printf '%s' "$2" | sed "s/^~\//\/home\/$USER\//" ); shift; shift
			else
				>&2 printf '%s\n' "$NAME: --image may only be used once." & exit 1
			fi;;
		--image=* )
			if [ -z "$COVER" ]; then
				COVER=$( printf '%s' "$1" | sed -e 's/--picture=//' -e "s/^~\//\/home\/$USER\//" ); shift;
			else
				>&2 printf '%s\n' "$NAME: --image may only be used once." & exit 1
			fi;;
		--image= )
			if [ -z "$COVER" ]; then
				COVER=0; shift;
			else
				>&2 printf '%s\n' "$NAME: --image may only be used once." & exit 1
			fi;;
		-0 | -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 )
			if [ -z "$compression" ]; then
				compression="$1"; shift;
			else
				>&2 printf '%s\n' "$NAME: Compression level may only be specified once." & exit 1
			fi;;
		*)
			if [ -z "$CUE" ]; then
				CUE="$1"; shift;
			else
				>&2 printf '%s\n' "$NAME: Invalid paramters." & exit 1
			fi;;
	esac
done
# Make sure that the remaining parameter is a cue file
if [ -z "$CUE" ]; then
	>&2 printf '%s\n' "$NAME: No cue file specified. See --help for usage." & exit 1
elif [ ! -f "$CUE" ] || ! printf '%s' "$CUE" | grep -iq '\.cue$'; then
	>&2 printf '%s\n' "$NAME: \"$CUE\" is neither a cue file nor a valid option." & exit 1
fi
# Make sure we're in cue file's directory and discover its name for use in finding matching files
printf '%s' "$CUE" | grep -q '/' && cd "$( printf '%s' "$CUE" | sed 's/\(.*\)\/.*/\1\//' )i"
CUENAME="$( printf '%s' "$CUE" | sed 's/\(.*\/\)\?\(.*\)\..*/\2/' )"
# Make sure that a single audio file is listed in the cue and that it exists, or look for an alternative
FILE=$( grep 'FILE' "$CUE" | sed 's/^\s*FILE\s\s*"\(.*\)"[^"]*$/\1/' )
if [ $( printf '%s' "$FILE" | wc -l | sed 's/[^0-9]//g' ) -gt 1 ]; then
	>&2 printf '%s\n' "$NAME: Multiple audio files are listed in the cue sheet."
	>&2 printf '%s\n' "$NAME: The album has probably already been split into tracks."
	exit 1
elif [ ! -f "$FILE" ]; then
	printf '%s\n' "$NAME: Could not find the audio file in the cue sheet: \"$FILE\""
	FILE=$(guess)
	test -f "$FILE" && printf '%s\n'  "$NAME: Trying \"$FILE\" instead..."
fi
# Make sure that the audio file is a flac file, and try to convert it or find a different one if it isn't
if [ -f "$FILE" ] && ! printf '%s' "$FILE" | grep -iq '\.flac$'; then
	printf '%s' "$NAME: Attempting to convert \"$FILE\"..."
	TEMPFILE="$( printf '%s' "$FILE" | sed 's/\(.*\)\..*/\1/' ).flac"
	if [ -w '/tmp/' ]; then
		TEMPFILE="/tmp/$TEMPFILE"; f='-f'
	fi
	if flac --totally-silent -0 "$f" -o "$TEMPFILE" "$FILE"; then
		FILE="$TEMPFILE"; tempfile=0
		printf '%s\n' " Done."
	else
		printf '\n%s\n' "$NAME: File conversion failed."
		FILE="$(guess flac)"
		test -f "$FILE" && printf '%s\n' "$NAME: Trying \"$FILE\" instead..."
	fi
	if [ -f "$FILE" ] && ! printf '%s' "$FILE" | grep -iq '\.flac$'; then
		printf '%s' "$NAME: Attempting to convert \"$FILE\"..."
		if flac --totally-silent -0 "$f" -o "$TEMPFILE" "$FILE"; then
			FILE="$TEMPFILE"; tempfile=0
			printf '%s\n' " Done."
		else
			printf '\n%s\n' "$NAME: File conversion failed."
		fi
	fi
fi
# Run the main function, which does the splitting and tagging, if a suitable audio file has been found
if [ -f "$FILE" ] && printf '%s' "$FILE" | grep -iq '\.flac$'; then
	main
else
	>&2 printf '%s\n' "$NAME: No compatible audio file found." & exit 1
fi
# Exit 1 if any of the encoding processes did not exit 0, remove the temporary file if one was created
for PID in $PIDS; do
	wait $PID
	if [ $? -ne 0 ]; then
		test -n "$tempfile" && rm "$FILE"
		exit 1
	fi
done
test -n "$tempfile" && rm "$FILE"
exit 0

